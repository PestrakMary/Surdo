import java.nio.file.Paths

apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.surdo"
        minSdkVersion 15
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(':pocketsphinx-android-5prealpha-release')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'
}

task buildGram() {
    println 'buildGram is in building'
    def lib = file(Paths.get(android.sourceSets.main.res.srcDirs[0].toString(), 'raw', 'lib.txt')).collect() { line ->
        line.split(", ", 2)[0]
    }
    def assetsDir = android.sourceSets.main.assets.srcDirs[0].toString()
    def dictWords = file(Paths.get(assetsDir, 'sync', 'car.dict')).collect() { line ->
        line.split(" ", 2)[0]
    }
    lib.each { command ->
        command.split(' ').each { word ->
            if (!dictWords.contains(word)) {
                throw new Exception("car.dict does not contain word ${word}, but lib.txt does")
            }
        }
    }
    def gram = file(Paths.get(assetsDir, 'sync', 'car.gram'))
    gram.text = """#JSGF V1.0;

grammar car;

<item> = (${lib.join(") | (")});

public <command> = ( <item> ) + ;
"""
}

ant.importBuild 'assets.xml'
list.dependsOn(buildGram)
checksum.dependsOn(buildGram)
preBuild.dependsOn(list, checksum)
clean.dependsOn(clean_assets)