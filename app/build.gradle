import org.gradle.work.Incremental

import java.nio.file.Paths
import java.sql.DriverManager
import groovy.json.JsonSlurper
import groovy.sql.Sql

apply plugin: 'com.android.application'

repositories {
    google()
    mavenCentral()
    maven {
        url 'https://alphacephei.com/maven/'
    }
}

configurations { driver }

android {
    compileSdkVersion 31
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "by.surdoteam.surdo"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode 6
        versionName "0.5.0"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86'
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"
                ]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.navigation:navigation-ui:2.4.2'
    implementation 'androidx.navigation:navigation-fragment:2.4.2'
    implementation "androidx.fragment:fragment:1.4.1"
    implementation "androidx.preference:preference:1.2.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.6.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'
    implementation 'net.java.dev.jna:jna:5.10.0@aar'
    implementation group: 'com.alphacephei', name: 'vosk-android', version: '0.3.23'
    implementation project(':models')
    driver 'org.xerial:sqlite-jdbc:3.25.2'
}

abstract class BuildDBTask extends DefaultTask {
    @Incremental
    @InputDirectory
    abstract DirectoryProperty getRaw();

    @Incremental
    @InputFile
    abstract RegularFileProperty getJson();

    @OutputFile
    abstract RegularFileProperty getDatabase();

    @TaskAction
    void execute() {
        println 'buildDB is in building'
        System.err.println("Don't forget to increase DB version if you changed something")
        Map<String, List<String>> library = new JsonSlurper().parseText(json.get().asFile.text)
        def videos = raw.get().asFileTree.matching(new PatternSet().include("*.mp4")).asList().stream().
                collect() { file -> file.name.split("\\.")[0] }
        def diff = library.keySet().toArray() - videos.toArray() - [""]
        if (diff.size() != 0)
            throw new Exception("Videos ${diff} aren't present in 'raw' folder, but are used in config")
        def unused = videos.toArray() - library.keySet().toArray()
        if (unused.size() != 0)
            System.err.println "Videos ${unised} are present in 'raw' folder, but aren't used in config"
        database.get().asFile.delete()
        DriverManager.registerDriver(GroovyObject.class.classLoader.loadClass("org.sqlite.JDBC").newInstance())
        def db = Sql.newInstance("jdbc:sqlite:${database.get().asFile.path}", "org.sqlite.JDBC")
        try {
            db.execute("CREATE TABLE IF NOT EXISTS `Command` (`word` TEXT, `path` TEXT, `primary` INTEGER NOT NULL, `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL)")
            library.each { entry ->
                def path = "android.resource://by.surdoteam.surdo/raw/${entry.key}"
                entry.value.eachWithIndex { word, index ->
                    db.execute(
                            "INSERT INTO `Command` (`word`, `path`, `primary`) VALUES(?, ?, ?)", [word, path, index == 0 ? 1 : 0]
                    )
                }
            }
        }
        finally {
            db.close()
        }
    }
}


task buildDB(type: BuildDBTask) {
    raw = file(Paths.get(android.sourceSets.main.res.srcDirs[0].toString(), 'raw'))
    json = file(Paths.get("libraries", "driving.json"))
    database = file(Paths.get(android.sourceSets.main.assets.srcDirs[0].toString(), "database", "library.db"))
    doFirst {
        println "Loading driver"
        ClassLoader loader = Sql.classLoader
        configurations.driver.each { File file ->
            loader.addURL(file.toURI().toURL())
        }
    }
}

preBuild.dependsOn buildDB

tasks.withType(JavaCompile) {
    options.deprecation = true
}